package br.com.impacta.estrutura.ordenacao;

public class MergeSort {

	
	public static void main(String[] args) {
		int[] a = new int[20];
		
		for (int i = 0; i < a.length; i++) {
			a[i] = (int)(Math.random() * 220);
		}
		
		mergeSort(a, 0, a.length-1);

	}

	public static void mergeSort(int[] a, int inicio, int fim) {

		if (fim <= inicio) {//se o valor pasado para o fim for menor que o inicio retorna para a função de chamada;
			return;
		}
        
		//identiico o meio entre os extremos informados
		int meio = (inicio + fim) / 2;
        
		//chamada recursiva para quebrar a array varias vezes.
		mergeSort(a, inicio, meio);
		mergeSort(a, meio + 1, fim);
        
		//cria um nova array para conter uma metade a ser verificada
		int[] A = new int[meio - inicio + 1];
		//cria um segundo arraypara a segunda etade a ser verificada.
		int[] B = new int[fim - meio];

		for (int i = 0; i <= meio - inicio; i++) {
			A[i] = a[inicio + i];
		}
		for (int i = 0; i <= fim - meio - 1; i++) {
			B[i] = a[meio + 1 + i];
		}
        
		
		for (int i = 0; i < A.length; i++) {
			System.out.print(" " + A[i]);
		}
		for (int i = 0; i < B.length; i++) {
			System.out.print(" " +B[i]);
		}
		
		System.out.println();
		int i = 0;
		int j = 0;

		for (int k = inicio; k <= fim; k++) {
			
			if (i < A.length && j < B.length) {
				if (A[i] < B[j]) {
					a[k] = A[i++];
				} else {
					a[k] = B[j++];
				}
			} else if (i < A.length) {
				a[k] = A[i++];
			} else if (j < B.length) {
				a[k] = B[j++];
			}
		}

	}


	
}
